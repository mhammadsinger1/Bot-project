#this code solves all the numbers from 1 till 6 perfectly
#i did not do the scoring since its not graded
#for number one, and since the questions are called ' levels', it seems the
#difficulty is determined by the level he chooses. i did exactly what the question said anyway, and included it always
#enjoy :)
drawing


#i got the following code from chat gpt
#what it does is empty the list from dashes and print them. i use it to print the hangman in a nice way
# so if output like this:
#['-', '-', '-']
#['-', 'O', '-']
#['-', '-', '-']
#it makes it like this
#[         ]
#[    O    ]
#[         ]
#
#
# function sequentialSnice_drawingearch
# params: drawing:  list of lists with dashes as indexes used to draw the hangedman
#O(n*n)=O(n^2), n being the length of the list

def nice_drawing(drawing):
  for row in drawing:
      new_row = []
      
      for elem in row:
          
          if elem == '-' :
              new_row.append(' ')
          else:
              new_row.append(elem)
           
      print( ' '.join(new_row)+' ')
  for row in drawing:
      new_row = []
      
      for elem in row:
          
          if elem == 'x' :
              new_row.append(' ')
          else:
              new_row.append(elem)
           
      print( ' '.join(new_row)+' ')     


#function heuristic
#params: a and b being the indexes i want to find the manhattan distance between
#O(1) since no search required    
#the heuristic is used to draw the face at indexes at my desired distance
def heuristic(a, b):
		(x1, y1) = a
		(x2, y2) = b
		return (abs(x1 - x2) + abs(y1 - y2))	

# function draw_the_head
# paramsL drawing
#prints "O" at all indexes with manhattan distance less then 3.1
#O(n*n)=O(n^2), n being the length of the list
def draw_the_head(drawing):
  for a in range(len(drawing)):    
      for b in range(len(drawing)):
        if heuristic([5,10],[a,b])<3.1:
          drawing[a][b]="O"
  nice_drawing(drawing)    
#the next following codes is clear what they do
#O(n) n being the range they are searching in
def draw_the_body(drawing):
    for a in range(7,20):
      drawing[a][10]='l'
    nice_drawing(drawing)       


#drawing the right hand will be more suitable with a forward slash instead of a backslash, but i get 'String literal is unterminated' and no time to ivestigate.
#i know its not good to put variables as 'a' and 'b' but its easy to see what they are doing plus i am in a jurry
def draw_the_right_hand(drawing):
    a=11
    b=10
    for x in range(1,4):
      
        drawing[a][b]="/"
        a +=1
        b +=1
    nice_drawing(drawing)  
  
def draw_the_right_leg(drawing):
    a=20
    b=11
    for x in range(1,4):
      
        drawing[a][b]="/"
        a +=1
        b +=1
    nice_drawing(drawing)   
def draw_the_left_hand(drawing):
    a=11
    b=10
    for x in range(1,4):
      
        drawing[a][b]='/'
        a +=1
        b -=1
    nice_drawing(drawing)

def draw_the_left_leg(drawing):
    a=20
    b=9
    for x in range(1,4):
      
        drawing[a][b]='/'
        a +=1
        b -=1
    nice_drawing(drawing)  

def draw_the_right_eye(drawing):
    drawing[4][11]='X'

    nice_drawing(drawing)    

def draw_the_left_eye(drawing):
    drawing[4][9]='X'

    nice_drawing(drawing) 


with open("test.txt") as fp:
  file = fp.readlines()
clean_file = []
for a in file:
  clean_file.append(a[:-1])



# function binarySearch
#params: list1: sorted list
  #      target: element we are searching for
  #      sart, end: borders of our search space
# returns true if target is in list1, false otherwise
#O(log N),N being the length of the list. Because we always remove half of the search space (elements we are considering) 

#i used it to insert new elements in the appropriate position and finding elements to remove

def binarySearch(list1,target,start,end):
 
  if start>end:
    list1.insert(end+1, target)
    return list1

  mid=(start+end)//2 

  if list1[mid]==target:
    return mid
    pass

  if list1[mid]<target:
    return binarySearch(list1,target,mid+1,end)
    
  else:
    return binarySearch(list1,target,start,mid-1)





def merge(list1, start, mid, end):  #O(n), n being the length of the list
  if start == end:
    return

  border1 = start  # this tells me the first element of the first list
  border2 = mid + 1  # thefirst element of the second list

  templist = []
  while border1 <= mid and border2 <= end:
    if list1[border1] < list1[border2]:
      templist.append(list1[border1])
      border1 += 1
    else:
      templist.append(list1[border2])
      border2 += 1

  # when one of the lists ran out of elements
  #  in case there are elements in the first sub list remaining
  while border1 <= mid:
    templist.append(list1[border1])
    border1 += 1
  #  in case there are elements in the second sub list remaining
  while border2 <= end:
    templist.append(list1[border2])
    border2 += 1
  list1[start:end + 1] = templist


# this is to divide
def mergeSort(list1, start, end):  #O(nlogn)
  # print(list1[start:end+1])
  # divide
  if start >= end:
    return

  mid = (start + end) // 2
  mergeSort(list1, start, mid)  #O(logN)
  mergeSort(list1, mid + 1, end)  #O(logN)
  merge(list1, start, mid, end)
  return list1


clean_file = mergeSort(clean_file, 0, len(clean_file) - 1)

#this code has complexity O(n), but it can be improved by using by having
#wors in one lists, their hints in other list, and using zip which has complexity O(1)
# i am in a hurry so its late to do that
def list_into_dictionary(dicta, clean_file):
  for line in clean_file:
    if ':' in line:
      key, value = line.split(':')
      dicta[key] = value
  return dicta


dicta = list_into_dictionary({}, clean_file)

import random


# function sequentialSearch
# params: dicta: sorted dictionary
# doesnt return anything becase i want to keep the game going
#O(n), n being the length of dicta
# the "for letter in (random_word)" does this
def game_starts(dicta,drawing):

  random_number = random.randint(0, len(dicta) - 1)

  random_word = (list(dicta)[random_number])

  masked_word = '-' * len(random_word)

  mistakes = 8

  print(masked_word + f' the hint for this word is {dicta[random_word]}')

  while True:

    guessed_letter = input(' please guess a letter ')

    index_counter = 0

    for letter in random_word:

      if letter == guessed_letter:

        masked_word = masked_word[:
                                  index_counter] + guessed_letter + masked_word[
                                    index_counter + 1:]

        if '-' not in masked_word:
          print('congrats, you wone!')
          
          response=input('type 2 if you want to play again, and 1 if you want to change level, 0 to exit')
          if response == '2':
            game_starts(dicta,drawing)
      
          elif response == '1':
            level_selection(dicta, clean_file,drawing)
            
          else:
            return          

        if random_word.count(guessed_letter) == masked_word.count(
            guessed_letter):
          print(masked_word +
                f' dont forget the hint which is {dicta[random_word]}')

      index_counter += 1

    if guessed_letter not in random_word:
      mistakes = mistakes - 1
      print(f' you have {mistakes} chances left or you get hanged. remember, hint is {dicta[random_word]}')
    if mistakes == 0:
          draw_the_left_eye(drawing)
         
          response = input(
        'oops you lost, type 2 if you want to play again, and 1 if you want to change level, 0 to exit')
          if response == '2':
            game_starts(dicta,drawing)
      
          elif response == '1':
            level_selection(dicta, clean_file,drawing)
            
          else:
            return
  
      
    if mistakes==7: 
        draw_the_head(drawing)
    elif mistakes==6: 
        draw_the_body(drawing)  
    elif mistakes==5: 
        draw_the_right_hand(drawing) 
    elif mistakes==4: 
        draw_the_left_hand(drawing)
    elif mistakes==3: 
        draw_the_right_leg(drawing) 
    elif mistakes==2: 
        draw_the_left_leg(drawing)
    elif mistakes==1: 
        draw_the_right_eye(drawing)      


 
def level_selection(dicta, clean_file,drawing):

    level = input(f'please select the required level ')
  
    if level == '1':
            game_starts(dicta,drawing)        
        
    if level=='2':
            if len(clean_file)>0:
              print('the words in the dictionary are '+str(clean_file))
              
            else:
              print('dictionary is empty')
      
            response=input('if you want to change level, type 1 or 0 to exit:')
            
            if response=='1':
              level_selection(dicta,clean_file,drawing)
              
            else:
              return



  
    if level=='3':
           added_word=input('what is the word you want to add ')
      
           its_hint=input('what is its hint ')
      
           clean_file=binarySearch(clean_file,added_word+':'+its_hint,0,len(clean_file)-1)

           print('cleanfile',clean_file)
      
           dicta=list_into_dictionary({},clean_file)
      
           print('the new dictionary is ', str(dicta))
      
           response=input( 'select 1 if you want to change level and 0 to exit ')
      
           if response=='1':
             
                level_selection(dicta,clean_file,drawing)              
           else:
                return

    if level=='4':
           removed_word=input('what is the word you want to remove? ')
      
           if removed_word in dicta:
               index_of_removed_word_in_list= binarySearch(clean_file,removed_word+':'+dicta[removed_word],0,len(clean_file)-1)
             
               del clean_file[index_of_removed_word_in_list]
               del dicta[removed_word]
               print('the new dictionary looks as follows: ' +str(dicta))
            
           else:
             print('this word is not in the dictionary')
      
           response=input( 'select 1 if you want to change level and 0 to exit ')
      
           if response=='1':
             
                level_selection(dicta,clean_file,drawing)              
           else:
                return

    if level == '5':
        
         updated_word= input(' what is the word you want to update its hint? ')
         

         if updated_word in dicta:


            new_hint=     input(' what is the hint you want ?') 
           
            index_of_removed_word_in_list= binarySearch(clean_file,updated_word+':'+dicta[updated_word],0,len(clean_file)-1)

            del clean_file[index_of_removed_word_in_list]
            clean_file.insert(index_of_removed_word_in_list,updated_word+':'+new_hint)

            dicta[updated_word] = new_hint

           
         else:
            print('this word doesnt exist')
           
           
         response=input( 'select 1 if you want to change level and 0 to exit ')
         
         if response=='1':
           
              level_selection(dicta,clean_file,drawing)              
         else:
              return      

    if level=='6':
      
      response=input('type yes if you want to save changes, and no otherwise ')
      if response=='yes':
            with open('test.txt', 'w') as f:
                for key,value in dicta.items():
                    f.write(key+':'+value)
                    f.write('\n')       
      return            
  
print('hello user')
level_selection(dicta, clean_file,drawing)



